{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","gpuType":"A100","authorship_tag":"ABX9TyN1AEXcWH5uPFpT44gSHfpZ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":14,"metadata":{"id":"oJ7ObmCsxG9u","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761920224557,"user_tz":-60,"elapsed":1036,"user":{"displayName":"Aleksa Mihajlovic","userId":"15833195468031824101"}},"outputId":"849d1ac7-d4ed-49b4-f001-55727d513c77"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","file_path = '/content/drive/MyDrive/IT&ML&Analytics/NLP - Text Classifier/'\n"]},{"cell_type":"code","source":["import random\n","import string\n","import regex as re\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","import warnings\n","warnings.filterwarnings(\"ignore\")\n","\n","import nltk\n","from nltk.corpus import stopwords\n","from nltk.tokenize import word_tokenize\n","from nltk.stem.snowball import SnowballStemmer\n","from nltk.stem.wordnet import WordNetLemmatizer\n","\n","\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.naive_bayes import MultinomialNB\n","from sklearn.metrics import f1_score, accuracy_score\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n","\n","pd.set_option('display.max_colwidth', None)\n","pd.set_option('display.max_rows', None)\n","pd.set_option('display.max_columns', None)\n","\n","# Opening the csv file without any parsing (UTF-8 encoding by default)\n","with open(file_path + \"training_data_lowercase.csv\", encoding=\"utf-8\") as f:\n","    lines = f.read().splitlines()\n","\n","rows = [line.split(\"\\t\", 1) for line in lines]\n","data = pd.DataFrame(rows, columns=[\"label\", \"text\"])\n","\n","data[\"label\"] = data[\"label\"].astype(str).str.replace(\"\\ufeff\", \"\", regex=False)\n","data[\"label\"] = pd.to_numeric(data[\"label\"], errors=\"coerce\").astype(\"Int64\")\n","\n","test_size = int(len(data)* 0.2)\n","test_indices = random.sample(range(0, len(data)), test_size)\n","\n","train_data = data.drop(index=test_indices)\n","test_data = data.iloc[test_indices]\n","\n","\n","plt.figure(figsize=(2, 1))\n","plt.xticks([0, 1])\n","data['label'].hist()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":137},"id":"bqLmpzjWyqLv","executionInfo":{"status":"ok","timestamp":1761920235134,"user_tz":-60,"elapsed":148,"user":{"displayName":"Aleksa Mihajlovic","userId":"15833195468031824101"}},"outputId":"0f3589f9-234e-4bde-8adc-ebdb2a4b53d1"},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 200x100 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["nltk.download('stopwords')\n","nltk.download('punkt_tab')\n","nltk.download('wordnet')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xxzGCmlm40-P","executionInfo":{"status":"ok","timestamp":1761920244131,"user_tz":-60,"elapsed":75,"user":{"displayName":"Aleksa Mihajlovic","userId":"15833195468031824101"}},"outputId":"b7d8371a-9523-4e27-bdba-25aec17b9106"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n","[nltk_data] Downloading package punkt_tab to /root/nltk_data...\n","[nltk_data]   Package punkt_tab is already up-to-date!\n","[nltk_data] Downloading package wordnet to /root/nltk_data...\n","[nltk_data]   Package wordnet is already up-to-date!\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["stemmer = SnowballStemmer(language = 'english')\n","lemmatizer = WordNetLemmatizer()\n","stop_words = set(stopwords.words('english'))\n","\n","\n","def clean_html_regex(text: str) -> str:\n","    # Remove <script>...</script> and <style>...</style> blocks (inline JS/CSS)\n","    text = re.sub(r'<script.*?>.*?</script>', '', text, flags=re.DOTALL | re.IGNORECASE)\n","    text = re.sub(r'<style.*?>.*?</style>', '', text, flags=re.DOTALL | re.IGNORECASE)\n","\n","    # Remove HTML comments <!-- ... -->. # (must be done before removing other tags since comments may contain '>')\n","    text = re.sub(r'<!--.*?-->', '', text, flags=re.DOTALL)\n","\n","    # Remove any remaining HTML tags like <div>, <p>, <a href=\"...\"> etc.\n","    text = re.sub(r'<[^>]+>', '', text)\n","\n","    # Optional: normalize spaces\n","    text = re.sub(r'\\s+', ' ', text).strip()\n","\n","    return text\n","\n","\n","def clean_text(text):\n","    text = re.sub(r'[^A-Za-z\\s]', ' ', text)             # leaves only words\n","    text = re.sub(r'\\b\\w\\b', '', text, flags=re.UNICODE) # removes single letter words\n","    text = re.sub(r'\\s+', ' ', text).strip()             # replace multiple white space with single white space\n","    text = re.sub(r\"^b'(.*)'$\", r\"\\1\", text)             # removes leading 'b\n","    text = text.lower()\n","    return text\n","\n","\n","\n","def preprocess_text(text):\n","\n","    text = clean_html_regex(text)\n","    text = clean_text(text)\n","    tokens = word_tokenize(text)\n","\n","    # tokens = [\n","    #     t\n","    #     for t in tokens\n","    #     if t not in stop_words and t not in string.punctuation\n","    # ]\n","\n","    # tokens = [\n","    #     stemmer.stem(t)\n","    #     for t in tokens\n","    # ]\n","\n","    clean_tokens = [lemmatizer.lemmatize(token) for token in tokens]\n","    #return text\n","    return clean_tokens\n","\n","\n","data_train = train_data.copy()\n","data_test = test_data.copy()\n","\n","data_train['clean_text'] = data_train['text'].apply(clean_html_regex).apply(clean_text)\n","data_test['clean_text'] = data_test['text'].apply(clean_html_regex).apply(clean_text)\n","\n","data_train['tokens'] = data_train['text'].apply(preprocess_text)\n","data_test['tokens'] = data_test['text'].apply(preprocess_text)\n","\n","data_train['preprocessed_text'] = data_train['tokens'].apply(lambda x: ' '.join(x))\n","data_test['preprocessed_text'] = data_test['tokens'].apply (lambda x: ' '.join(x))\n","\n","data_train.head(2)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":146},"id":"PJJ9Ku5o4pwR","executionInfo":{"status":"ok","timestamp":1761920254536,"user_tz":-60,"elapsed":8615,"user":{"displayName":"Aleksa Mihajlovic","userId":"15833195468031824101"}},"outputId":"f5ad4738-94cb-4795-8bc2-a210d99ac27c"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   label  \\\n","1      0   \n","2      0   \n","\n","                                                                                        text  \\\n","1                       drunk bragging trump staffer started russian collusion investigation   \n","2  sheriff david clarke becomes an internet joke for threatening to poke people ‚in the eye‚   \n","\n","                                                                                clean_text  \\\n","1                     drunk bragging trump staffer started russian collusion investigation   \n","2  sheriff david clarke becomes an internet joke for threatening to poke people in the eye   \n","\n","                                                                                                    tokens  \\\n","1                            [drunk, bragging, trump, staffer, started, russian, collusion, investigation]   \n","2  [sheriff, david, clarke, becomes, an, internet, joke, for, threatening, to, poke, people, in, the, eye]   \n","\n","                                                                         preprocessed_text  \n","1                     drunk bragging trump staffer started russian collusion investigation  \n","2  sheriff david clarke becomes an internet joke for threatening to poke people in the eye  "],"text/html":["\n","  <div id=\"df-9d22093a-0bdd-4be4-b9c1-500bf2d38fb6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>text</th>\n","      <th>clean_text</th>\n","      <th>tokens</th>\n","      <th>preprocessed_text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>drunk bragging trump staffer started russian collusion investigation</td>\n","      <td>drunk bragging trump staffer started russian collusion investigation</td>\n","      <td>[drunk, bragging, trump, staffer, started, russian, collusion, investigation]</td>\n","      <td>drunk bragging trump staffer started russian collusion investigation</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>sheriff david clarke becomes an internet joke for threatening to poke people ‚in the eye‚</td>\n","      <td>sheriff david clarke becomes an internet joke for threatening to poke people in the eye</td>\n","      <td>[sheriff, david, clarke, becomes, an, internet, joke, for, threatening, to, poke, people, in, the, eye]</td>\n","      <td>sheriff david clarke becomes an internet joke for threatening to poke people in the eye</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9d22093a-0bdd-4be4-b9c1-500bf2d38fb6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9d22093a-0bdd-4be4-b9c1-500bf2d38fb6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9d22093a-0bdd-4be4-b9c1-500bf2d38fb6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-6774b793-304f-412d-a7a8-974903106c50\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6774b793-304f-412d-a7a8-974903106c50')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-6774b793-304f-412d-a7a8-974903106c50 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data_train","summary":"{\n  \"name\": \"data_train\",\n  \"rows\": 27322,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26075,\n        \"samples\": [\n          \"jake tapper stunned by trump\\u201as stupidity\",\n          \"this 50s tv show predicted trump\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"clean_text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26042,\n        \"samples\": [\n          \"new video antifa terror group infiltrated transgender leader use knives to stab opponents have ak ready to shut down free speech\",\n          \"military joins brazil army exercises in amazon\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tokens\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"preprocessed_text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26042,\n        \"samples\": [\n          \"new video antifa terror group infiltrated transgender leader use knife to stab opponent have ak ready to shut down free speech\",\n          \"military join brazil army exercise in amazon\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["from sentence_transformers import SentenceTransformer\n","\n","#embedder = SentenceTransformer(\"all-MiniLM-L6-v2\")\n","#embedder = SentenceTransformer(\"all‑mpnet‑base‑v2\")\n","embedder = SentenceTransformer(\"sentence-transformers/all-mpnet-base-v2\")\n","X_train_mpnet = embedder.encode(data_train[\"clean_text\"].tolist())\n","X_test_mpnet  = embedder.encode(data_test[\"clean_text\"].tolist())\n","\n","y_train = data_train[\"label\"]\n","y_test = data_test[\"label\"]"],"metadata":{"id":"ZLQqEHMc5H31","executionInfo":{"status":"ok","timestamp":1761920269457,"user_tz":-60,"elapsed":14918,"user":{"displayName":"Aleksa Mihajlovic","userId":"15833195468031824101"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["!pip uninstall -y xgboost\n","!pip install xgboost==2.0.3 --no-cache-dir --force-reinstall"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"collapsed":true,"id":"wC33B218O1Gc","executionInfo":{"status":"ok","timestamp":1761914085394,"user_tz":-60,"elapsed":20708,"user":{"displayName":"Aleksa Mihajlovic","userId":"15833195468031824101"}},"outputId":"48c2dff1-b411-4a81-84e3-90c143f37bbd"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Found existing installation: xgboost 3.1.1\n","Uninstalling xgboost-3.1.1:\n","  Successfully uninstalled xgboost-3.1.1\n","Collecting xgboost==2.0.3\n","  Downloading xgboost-2.0.3-py3-none-manylinux2014_x86_64.whl.metadata (2.0 kB)\n","Collecting numpy (from xgboost==2.0.3)\n","  Downloading numpy-2.3.4-cp312-cp312-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl.metadata (62 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.1/62.1 kB\u001b[0m \u001b[31m13.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting scipy (from xgboost==2.0.3)\n","  Downloading scipy-1.16.3-cp312-cp312-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (62 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.0/62.0 kB\u001b[0m \u001b[31m272.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading xgboost-2.0.3-py3-none-manylinux2014_x86_64.whl (297.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m297.1/297.1 MB\u001b[0m \u001b[31m357.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading numpy-2.3.4-cp312-cp312-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl (16.6 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m16.6/16.6 MB\u001b[0m \u001b[31m373.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading scipy-1.16.3-cp312-cp312-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (35.7 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m35.7/35.7 MB\u001b[0m \u001b[31m250.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: numpy, scipy, xgboost\n","  Attempting uninstall: numpy\n","    Found existing installation: numpy 2.3.4\n","    Uninstalling numpy-2.3.4:\n","      Successfully uninstalled numpy-2.3.4\n","  Attempting uninstall: scipy\n","    Found existing installation: scipy 1.16.3\n","    Uninstalling scipy-1.16.3:\n","      Successfully uninstalled scipy-1.16.3\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","tensorflow 2.19.0 requires numpy<2.2.0,>=1.26.0, but you have numpy 2.3.4 which is incompatible.\n","opencv-python 4.12.0.88 requires numpy<2.3.0,>=2; python_version >= \"3.9\", but you have numpy 2.3.4 which is incompatible.\n","opencv-python-headless 4.12.0.88 requires numpy<2.3.0,>=2; python_version >= \"3.9\", but you have numpy 2.3.4 which is incompatible.\n","cupy-cuda12x 13.3.0 requires numpy<2.3,>=1.22, but you have numpy 2.3.4 which is incompatible.\n","numba 0.60.0 requires numpy<2.1,>=1.22, but you have numpy 2.3.4 which is incompatible.\n","opencv-contrib-python 4.12.0.88 requires numpy<2.3.0,>=2; python_version >= \"3.9\", but you have numpy 2.3.4 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed numpy-2.3.4 scipy-1.16.3 xgboost-2.0.3\n"]},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["numpy","scipy","xgboost"]},"id":"fdee394a3584489890f89657b05fdc2b"}},"metadata":{}}]},{"cell_type":"code","source":["import itertools\n","import xgboost as xgb\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","\n","# Your base data\n","X_train, X_test = X_train_mpnet, X_test_mpnet\n","\n","# Define parameter grid\n","param_grid = {\n","    \"n_estimators\": [800, 1000, 1200],\n","    \"learning_rate\": [0.09, 0.1],\n","    \"max_depth\": [6, 8],\n","    \"subsample\": [0.8, 1.0],\n","    \"colsample_bytree\": [0.8, 1.0],\n","    \"reg_lambda\": [3, 5],\n","    \"reg_alpha\": [0],\n","}\n","\n","best_acc = 0\n","best_params = None\n","results = []\n","\n","# Iterate over all combinations\n","for params in itertools.product(*param_grid.values()):\n","    # Build parameter dictionary for this combination\n","    param_dict = dict(zip(param_grid.keys(), params))\n","    print(f\"Testing: {param_dict}\")\n","\n","    # Train model\n","    clf = xgb.XGBClassifier(\n","        **param_dict,\n","        eval_metric=\"logloss\",\n","        use_label_encoder=False,\n","        tree_method=\"gpu_hist\",\n","        n_jobs=-1,\n","        random_state=42\n","    )\n","    clf.fit(X_train_mpnet, y_train)\n","\n","    # Predict and evaluate\n","    y_pred = clf.predict(X_test_mpnet)\n","\n","    acc = accuracy_score(y_test, y_pred)\n","    print(f\"Accuracy: {acc:.4f}\")\n","\n","    # Store results\n","    results.append((param_dict, acc))\n","\n","    # Track best\n","    if acc > best_acc:\n","        best_acc = acc\n","        best_params = param_dict\n","\n","print(\"\\n✅ Best model:\")\n","print(best_params)\n","print(f\"Accuracy: {best_acc:.4f}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"an30YWSgN9A0","executionInfo":{"status":"ok","timestamp":1761921062135,"user_tz":-60,"elapsed":635197,"user":{"displayName":"Aleksa Mihajlovic","userId":"15833195468031824101"}},"outputId":"22935fd6-bd12-4fe7-abc6-b4d24351e735"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Testing: {'n_estimators': 800, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9411\n","Testing: {'n_estimators': 800, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9400\n","Testing: {'n_estimators': 800, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9387\n","Testing: {'n_estimators': 800, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9381\n","Testing: {'n_estimators': 800, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9378\n","Testing: {'n_estimators': 800, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9387\n","Testing: {'n_estimators': 800, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9401\n","Testing: {'n_estimators': 800, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9376\n","Testing: {'n_estimators': 800, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9375\n","Testing: {'n_estimators': 800, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9378\n","Testing: {'n_estimators': 800, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9388\n","Testing: {'n_estimators': 800, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9376\n","Testing: {'n_estimators': 800, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9373\n","Testing: {'n_estimators': 800, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9384\n","Testing: {'n_estimators': 800, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9379\n","Testing: {'n_estimators': 800, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9387\n","Testing: {'n_estimators': 800, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9373\n","Testing: {'n_estimators': 800, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9395\n","Testing: {'n_estimators': 800, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9394\n","Testing: {'n_estimators': 800, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9403\n","Testing: {'n_estimators': 800, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9384\n","Testing: {'n_estimators': 800, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9403\n","Testing: {'n_estimators': 800, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9400\n","Testing: {'n_estimators': 800, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9388\n","Testing: {'n_estimators': 800, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9367\n","Testing: {'n_estimators': 800, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9348\n","Testing: {'n_estimators': 800, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9367\n","Testing: {'n_estimators': 800, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9370\n","Testing: {'n_estimators': 800, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9362\n","Testing: {'n_estimators': 800, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9367\n","Testing: {'n_estimators': 800, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9373\n","Testing: {'n_estimators': 800, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9382\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9416\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9408\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9397\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9392\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9382\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9404\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9401\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9385\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9384\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9382\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9397\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9381\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9388\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9384\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9378\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9385\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9372\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9403\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9407\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9404\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9397\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9407\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9395\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9381\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9372\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9353\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9381\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9375\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9363\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9379\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9376\n","Testing: {'n_estimators': 1000, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9379\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9425\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9411\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9403\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9394\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9388\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9404\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9404\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9388\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9397\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9385\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9398\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9388\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9388\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9382\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9376\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.09, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9387\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9378\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9398\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9408\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9404\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9391\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9414\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9398\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.1, 'max_depth': 6, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9389\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9373\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9357\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9382\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 0.8, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9385\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9370\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 0.8, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9384\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9372\n","Testing: {'n_estimators': 1200, 'learning_rate': 0.1, 'max_depth': 8, 'subsample': 1.0, 'colsample_bytree': 1.0, 'reg_lambda': 5, 'reg_alpha': 0}\n","Accuracy: 0.9384\n","\n","✅ Best model:\n","{'n_estimators': 1200, 'learning_rate': 0.09, 'max_depth': 6, 'subsample': 0.8, 'colsample_bytree': 0.8, 'reg_lambda': 3, 'reg_alpha': 0}\n","Accuracy: 0.9425\n"]}]}]}